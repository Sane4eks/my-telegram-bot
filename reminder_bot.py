from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import logging
import asyncio
import os
import time
from dotenv import load_dotenv
from database import insert_user, get_all_users, create_table, create_timer_table
import sqlite3

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_timers = {}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –∏ —Ç–∞–π–º–µ—Ä–æ–≤
TIMER_OPTIONS = {
    'OKX Racer': ("üèÅ OKX Racer - 1 —á", "https://t.me/OKX_official_bot/OKX_Racer?startapp=linkCode_139909341", 60 * 60),
    'EasyWatch': ("üëÅ EasyWatch - 12 —á", "https://t.me/ESWatch_bot?start=uAaPExy", 12 * 60 * 60),
    'MOONBIX': ("üî∏ MOONBIX - 2 —á", "https://t.me/Binance_Moonbix_bot/start?startApp=ref_657755660&startapp=ref_657755660&utm_medium=web_share_copy", 2 * 60 * 60),
    'Not Pixel': ("üëæ Not Pixel - 3 —á", "https://t.me/notpixel/app?startapp=f657755660", 3 * 60 * 60),
    'HRUM': ("ü•† HRUM - 12 —á", "https://t.me/hrummebot/game?startapp=ref657755660", 12 * 60 * 60),
    'Bums': ("ü§© Bums - 3 —á", "https://t.me/bums/app?startapp=ref_jV6eAxBB", 3 * 60 * 60),
    'Horizon Launch': ("üöÄ Horizon Launch - 12 —á", "https://t.me/HorizonLaunch_bot/HorizonLaunch?startapp=657755660", 12 * 60 * 60),
    'Volts': ("‚ö°Ô∏è Volts - 12 —á", "https://t.me/VoltStorageBot/volts?startapp=z55lp3b8rud22s1z7935kk", 12 * 60 * 60),
    'Blum': ("‚ô†Ô∏è Blum - 8 —á", "http://t.me/BlumCryptoBot/app?startapp=ref_7L2ahDVgyG", 8 * 60 * 60),
    'X Empire': ("üìà X Empire - 3 —á", "https://t.me/empirebot/game?startapp=hero657755660", 3 * 60 * 60),
    'Hamster Kombat': ("üêπ Hamster Kombat - 3 —á", "https://t.me/hamster_kOmbat_bot/start?startapp=kentId657755660", 3 * 60 * 60),
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
async def start_timer(duration: int, user_id: int, option_text: str, context: CallbackContext):
    start_time = time.time()
    active_timers.setdefault(user_id, {})[option_text] = (duration, start_time)

    await asyncio.sleep(duration)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞
    try:
        await context.bot.send_message(chat_id=user_id, text=f"–¢–∞–π–º–µ—Ä {option_text} –∏—Å—Ç—ë–∫!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è {user_id}: {e}")

    # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if user_id in active_timers:
        del active_timers[user_id][option_text]
        if not active_timers[user_id]:
            del active_timers[user_id]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_timers():
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, timer_name, duration, start_time FROM timers')
        for user_id, timer_name, duration, start_time in cursor.fetchall():
            active_timers.setdefault(user_id, {})[timer_name] = (duration, start_time)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "Unknown"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    insert_user(user_id, username)  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    keyboard = [['START', '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã']]
    if user_id == 657755660:
        keyboard.append(['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_users(update: Update, context: CallbackContext):
    users = get_all_users()
    user_list = "\n".join([f"ID: {user[0]}, User ID: {user[1]}, Username: {user[2]}" for user in users])
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{user_list}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_message_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "START":
        await show_timer_options(update, context)
    elif text == "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã":
        await show_active_timers(update, context)
    elif text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and user_id == 657755660:
        await show_users(update, context)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def show_timer_options(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("üî∏ MOONBIX (2 —á–∞—Å–∞)", callback_data='MOONBIX')],
                [InlineKeyboardButton("üèÅ OKX Racer (1 —á–∞—Å)", callback_data='OKX Racer')],
                [InlineKeyboardButton("üëæ Not Pixel (3 —á–∞—Åa)", callback_data='Not Pixel')],
                [InlineKeyboardButton("ü•† HRUM (12 —á–∞—Å–æ–≤)", callback_data='HRUM')],
                [InlineKeyboardButton("ü§© Bums (3 —á–∞—Å–∞)", callback_data='Bums')],
                [InlineKeyboardButton("üöÄ Horizon Launch (12 —á–∞—Å–æ–≤)", callback_data='Horizon Launch')],
                [InlineKeyboardButton("‚ö°Ô∏è Volts (12 —á–∞—Å)", callback_data='Volts')],
                [InlineKeyboardButton("‚ô†Ô∏è Blum (8 —á–∞—Å–æ–≤)", callback_data='Blum')],
                [InlineKeyboardButton("üìà X Empire (3 —á–∞—Å–∞)", callback_data='X Empire')],
                [InlineKeyboardButton("üêπ Hamster Kombat (3 —á–∞—Å–∞)", callback_data='Hamster Kombat')],
                [InlineKeyboardButton("üëÅ EasyWatch (12 —á–∞—Å)", callback_data='EasyWatch')],
               ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä:', reply_markup=reply_markup)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
async def show_active_timers(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in active_timers and active_timers[user_id]:
        remaining_timers = []
        current_time = time.time()

        for name, (duration, start_time) in active_timers[user_id].items():
            elapsed_time = current_time - start_time
            remaining_time = duration - elapsed_time

            if remaining_time > 0:
                hours_left = int(remaining_time // 3600)
                minutes_left = int((remaining_time % 3600) // 60)
                seconds_left = int(remaining_time % 60)
                remaining_timers.append(f"{name}: {hours_left} —á {minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫")
            else:
                remaining_timers.append(f"{name}: —Ç–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫")

        if remaining_timers:
            await update.message.reply_text("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n" + "\n".join(remaining_timers))
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    option = query.data
    text, link, duration = TIMER_OPTIONS[option]

    chat_id = query.message.chat_id

    if chat_id not in active_timers:
        active_timers[chat_id] = {}
    active_timers[chat_id][text] = (duration, time.time())

    # –ü–µ—Ä–µ–¥–∞–µ–º context –≤ —Ñ—É–Ω–∫—Ü–∏—é start_timer
    asyncio.create_task(start_timer(duration, chat_id, text, context))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('bot_users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO timers (user_id, timer_name, duration, start_time)
            VALUES (?, ?, ?, ?)
        ''', (chat_id, text, duration, time.time()))
        conn.commit()

    await query.edit_message_text(text=f"–¢–∞–π–º–µ—Ä –¥–ª—è {text} –∑–∞–ø—É—â–µ–Ω! –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: {link}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update {update} caused error {context.error}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    create_table()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    create_timer_table()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–∞–π–º–µ—Ä–æ–≤
    load_timers()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))
    application.add_error_handler(error_handler)

    application.run_polling()

if __name__ == '__main__':
    main()