from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext
import logging
import asyncio
import os
from dotenv import load_dotenv
from database import insert_user, get_all_users  # –ò–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –∏ —Ç–∞–π–º–µ—Ä–æ–≤
TIMER_OPTIONS = {
    'MOONBIX': ("üî∏ MOONBIX - 5 –º–∏–Ω", "https://t.me/Binance_Moonbix_bot/start?startApp=ref_657755660&startapp=ref_657755660&utm_medium=web_share_copy"),
    'Not Pixel': ("üëæ Not Pixel - 1 —á", "https://t.me/notpixel/app?startapp=f657755660"),
    'HRUM': ("ü•† HRUM - 12 —á", "https://t.me/hrummebot/game?startapp=ref657755660"),
    'Bums': ("ü§© Bums - 3 —á", "https://t.me/bums/app?startapp=ref_jV6eAxBB"),
    'Horizon Launch': ("üöÄ Horizon Launch - 1 —á", "https://t.me/HorizonLaunch_bot/HorizonLaunch?startapp=657755660"),
    'Volts': ("‚ö°Ô∏è Volts - 1 —á", "https://t.me/VoltStorageBot/volts?startapp=z55lp3b8rud22s1z7935kk"),
    'Blum': ("‚ô†Ô∏è Blum - 8 —á", "http://t.me/BlumCryptoBot/app?startapp=ref_7L2ahDVgyG"),
    'X Empire': ("üìà X Empire - 3 —á", "https://t.me/empirebot/game?startapp=hero657755660")
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
async def start_timer(duration: int, bot, chat_id, option_text):
    await asyncio.sleep(duration)
    await bot.send_message(chat_id=chat_id, text=f"–¢–∞–π–º–µ—Ä {option_text} –∏—Å—Ç—ë–∫!")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    insert_user(user_id, username)

    keyboard = [
        [InlineKeyboardButton("üî∏ MOONBIX (5 –º–∏–Ω)", callback_data='MOONBIX')],
        [InlineKeyboardButton("üëæ Not Pixel (1 —á–∞—Å)", callback_data='Not Pixel')],
        [InlineKeyboardButton("ü•† HRUM (12 —á–∞—Å–æ–≤)", callback_data='HRUM')],
        [InlineKeyboardButton("ü§© Bums (3 —á–∞—Å–∞)", callback_data='Bums')],
        [InlineKeyboardButton("üöÄ Horizon Launch (1 —á–∞—Å)", callback_data='Horizon Launch')],
        [InlineKeyboardButton("‚ö°Ô∏è Volts (1 —á–∞—Å)", callback_data='Volts')],
        [InlineKeyboardButton("‚ô†Ô∏è Blum (8 —á–∞—Å–æ–≤)", callback_data='Blum')],
        [InlineKeyboardButton("üìà X Empire (3 —á–∞—Å–∞)", callback_data='X Empire')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    option = query.data
    text, link = TIMER_OPTIONS.get(option, ("", ""))
    duration = 0
    if option == 'MOONBIX':
        duration = 5 * 60
    elif option == 'Not Pixel':
        duration = 60 * 60
    elif option == 'HRUM':
        duration = 12 * 60 * 60
    elif option == 'Bums':
        duration = 3 * 60 * 60
    elif option == 'Horizon Launch':
        duration = 60 * 60
    elif option == 'Volts':
        duration = 60 * 60
    elif option == 'Blum':
        duration = 8 * 60 * 60
    elif option == 'X Empire':
        duration = 3 * 60 * 60

    chat_id = query.message.chat_id

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    asyncio.create_task(start_timer(duration, context.bot, chat_id, text))

    await query.edit_message_text(
        text=f"–¢–∞–π–º–µ—Ä –¥–ª—è {text} –∑–∞–ø—É—â–µ–Ω! –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: {link}"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast(update: Update, context: CallbackContext):
    message = ' '.join(context.args)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    users = get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for user in users:
        user_id = user[1]
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update {update} caused error {context.error}")

def main():

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("broadcast", broadcast))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    application.add_handler(CallbackQueryHandler(button))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
